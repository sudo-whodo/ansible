---
# System Patching Playbook
#
# Purpose: Update all packages on target systems using the package module
#
# Usage:
#   ansible-playbook -i inventory system_patching.yml
#
#   # With automatic reboot if required
#   ansible-playbook -i inventory system_patching.yml -e "reboot_if_required=true"
#
#   # Target specific hosts
#   ansible-playbook -i inventory system_patching.yml --limit webservers
#
# Supported Package Managers:
#   - dnf (RHEL 8+, Fedora)
#   - apt (Debian, Ubuntu)
#
# Variables:
#   reboot_if_required: (default: false) Automatically reboot if kernel updates require it

- name: Patch all systems
  hosts: all
  become: true
  gather_facts: true
  serial: 1

  vars:
    reboot_if_required: false

  tasks:
    - name: Update package cache for apt-based systems
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_pkg_mgr == "apt"

    - name: Update package cache for dnf-based systems
      ansible.builtin.dnf:
        update_cache: yes
      when: ansible_pkg_mgr == "dnf"
      register: dnf_cache_update
      failed_when: false  # dnf check-update returns 100 when updates are available

    - name: Upgrade all packages using package module
      ansible.builtin.package:
        name: "*"
        state: latest
      register: package_update_result

    - name: Check if reboot is required on Debian/Ubuntu
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_pkg_mgr == "apt"

    - name: Check if reboot is required on RHEL/Fedora
      ansible.builtin.shell: |
        needs-restarting -r
      register: needs_restarting_result
      failed_when: false
      changed_when: false
      when: ansible_pkg_mgr == "dnf"

    - name: Set reboot required fact
      ansible.builtin.set_fact:
        system_needs_reboot: >-
          {{
            (ansible_pkg_mgr == "apt" and reboot_required_file.stat.exists | default(false)) or
            (ansible_pkg_mgr == "dnf" and needs_restarting_result.rc | default(0) == 1)
          }}

    - name: Display reboot requirement status
      ansible.builtin.debug:
        msg: >-
          System {{ 'requires a reboot' if system_needs_reboot else 'does not require a reboot' }}
          after patching.

    - name: Reboot system if required and authorized
      ansible.builtin.reboot:
        msg: "Rebooting after system patching"
        reboot_timeout: 600
        post_reboot_delay: 30
        test_command: whoami
      when:
        - system_needs_reboot
        - reboot_if_required | bool

    - name: Wait for system to come back online after reboot
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 30
        timeout: 600
      when:
        - system_needs_reboot
        - reboot_if_required | bool

    - name: Verify system is fully operational after reboot
      ansible.builtin.command: uptime
      register: uptime_result
      changed_when: false
      when:
        - system_needs_reboot
        - reboot_if_required | bool

    - name: Display system uptime after reboot
      ansible.builtin.debug:
        msg: "System is back online: {{ uptime_result.stdout }}"
      when:
        - system_needs_reboot
        - reboot_if_required | bool

    - name: Display completion message
      ansible.builtin.debug:
        msg: >-
          Patching completed.
          {{ 'System was rebooted.' if (system_needs_reboot and reboot_if_required | bool) else '' }}
          {{ 'Reboot is required but not performed. Run with -e reboot_if_required=true to auto-reboot.' if (system_needs_reboot and not reboot_if_required | bool) else '' }}
